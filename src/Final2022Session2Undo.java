//ამოცანა 5. (35 ქულა) გადახვევა
//თქვენი ამოცანაა დაწეროთ undo/redo ფუნქციონალი. წარმოიდგინეთ, რომ ამას
//ტექსტური რედაქტორისთვის წერთ. ტექტური რედაქტორი ახდენს ტექსტის
//მანიპულაციას, თქვენი მიზანია ეს მანიპულაციები შეინახოთ ისტორიაში და
//უკან და წინ გადაახვიოთ, ანუ გააკეთოთ undo და redo. შეგვიძლია
//ოპტიმიზაციას ყურადღება არ მივაქციოთ და ტექტის ცვლილების დროს ისტორიაში
//შევინახოთ არა ცვლილება(მაგალითად დაემატა ახალი სიტყვა ან წაიშალა
//სიტყვა) არამედ მთლიანად მთელი შეცვლილი ტექსტი. შესაბამისად თქვენს
//ისტორიაში ტექსტის სხვადასხვა ვერსიები იქნება. უნდა შეგეძლოთ ისტორია
//გადაახვიოთ ანუ undo გააკეთოთ და ახალი ცვლილებები შეიტანოთ თქვენს
//ისტორიაში რაც ცხადია თავზე გადაეწერება ძველ ცვლილებებს. ანდუს
//რეალიზაციისთვის უნდა უნდა დაწეროთ კლასი, რომელიც იმპლემენტირებს შემდეგ
//ინტერფეისს:
//	save მეთოდი ისტორიაში ამატებს ახალ მიმდინარე ტექსტს(ანუ ამას
//			გამოიძახებენ როცა ისტორიაში რამის შენახვა უნდათ).
//			get მეთოდი აბრუნებს მიმდინარე ტექსტს. თუკი ისტორია ცარიელია მაშინ
//			მეთოდი აბრუნებს ცარიელ სტრინგს.
//			undo ისტორიას გადაახვევს ერთი ბიჯით უკან. ანუ მიმდინარე ტექსტს შეცვლის
//			წინა ტექსტით. undo არაფერს არ აბრუნებს, მაგრამ მის შემდეგ get-ს თუ
//			გამოვიძახებთ ის დაგვიბრუნებს ერთი ბიჯით ძველ ტექსტს. თუკი უფრო ძველი
//			ტექსტი არ არსებობდა და მაშინ გამოიძახეს undo არაფერი არ უნდა მოხდეს.
//			redo ისტორიას გადაახვევს ერთი ბიჯით წინ. გასაგებია, რომ redo-ს
//			გამოძახებას აზრი აქვს მხოლოდ მაშინ თუ მანამდე ერთი ან რამდენიმე undo
//			გაქვთ გამოძახებული. თუკი undo გამოძახებული არ არის და თქვენი მიმდინარე
//			ტექსტი არის უახლესი მაშინ redo არაფერს არ გააკეთებს.
//			clear მეთოდი წაშლის ისტორიას.	

import java.util.ArrayList;

public class Final2022Session2Undo implements Final2022Session2Undoer{
	private ArrayList<String> history;
	private int currIndex = -1;
	public Final2022Session2Undo() {
		clear();
	}
	@Override
	public String get() {
		if (currIndex < 0) {
			return "";
		}
		return history.get(currIndex);
	}

	@Override
	public void save(String text) {
		int elementsToRemove = history.size() - 1 - currIndex;
		for(int i = 0; i < elementsToRemove; i++) {
			history.remove(history.size() - 1);
		}
		history.add(text);
		currIndex += 1;
	}

	@Override
	public void undo() {
		if(currIndex > 0) {
			currIndex -= 1;	
		}
	}

	@Override
	public void redo() {
		if(currIndex < history.size() - 1) {
			currIndex += 1;	
		}
		
	}

	@Override
	public void clear() {
		history = new ArrayList<>();
		currIndex = -1;
	}
}
